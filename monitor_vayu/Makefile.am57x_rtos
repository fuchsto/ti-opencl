include ../host/Makefile.inc

# If not specified, assume the opencl source directory is at same location as
# monitor
OPENCL_SRC_DIR ?= ../host

# If not specified, pick a default location for TI dependent packages
DEFAULT_DEV_INSTALL_DIR ?= $(DEFAULT_PSDK_RTOS)

# And for the devkit, when doing an x86 build ...
UNAME_M :=$(shell uname -m)

ifeq ($(TI_OCL_CGT_INSTALL),)
  $(error Monitor requires TI_OCL_CGT_INSTALL to point to C6000 Codegen tools)
endif

# Enabling OpenMP in the monitor by default
OMP_ENABLED    ?= 1
export OMP_ENABLED

AM57_PDK_DIR   ?= $(wildcard $(DEFAULT_DEV_INSTALL_DIR)/pdk_am57xx_*)
IPC_DIR        ?= $(wildcard $(DEFAULT_DEV_INSTALL_DIR)/ipc_*)
XDC_DIR        ?= $(wildcard $(DEFAULT_DEV_INSTALL_DIR)/xdctools_*)
BIOS_DIR       ?= $(wildcard $(DEFAULT_DEV_INSTALL_DIR)/bios_*)
ifeq ($(OMP_ENABLED),1)
OMP_DIR        ?= $(wildcard $(DEFAULT_DEV_INSTALL_DIR)/openmp_dsp_*)
endif
FC_DIR         ?= $(wildcard $(DEFAULT_DEV_INSTALL_DIR)/framework_components*)
EDMA3LLD_DIR   ?= $(wildcard $(DEFAULT_DEV_INSTALL_DIR)/edma3_lld_*)
XDAIS_DIR      ?= $(wildcard $(DEFAULT_DEV_INSTALL_DIR)/xdais_*)
#ULM_DIR        ?= $(LINUX_DEVKIT_ROOT)/usr/share/ti/ulm
#GDB_SERVER_DIR ?= $(LINUX_DEVKIT_ROOT)/usr/share/ti/gdbc6x

export XDC_DIR
export BIOS_DIR

PLATFORM  = am57x_rtos
PROJECT   = monitor
DEVICE    = DEVICE_AM572x
SOC       = SOC_AM572x

## !Need -O* to inline CACHE_* functions!
CC= $(TI_OCL_CGT_INSTALL)/bin/cl6x -o3 -mv6600 --abi=eabi --gcc --mem_model:const=data --mem_model:data=far -D_SYS_BIOS
AR= $(TI_OCL_CGT_INSTALL)/bin/ar6x

INCLUDES  = -i. -i $(OPENCL_SRC_DIR)/src/core/dsp
INCLUDES += -i $(AM57_PDK_DIR)/packages -i $(TI_OCL_CGT_INSTALL)/include \
	    -i $(IPC_DIR)/packages -i $(XDC_DIR)/packages           \
	    -i $(BIOS_DIR)/packages -i $(EDMA3LLD_DIR)/packages     \
	    -i $(FC_DIR)/packages -i $(XDAIS_DIR)/packages -i ../packages
INCLUDES += -D$(DEVICE)
INCLUDES += -D$(SOC)
#INCLUDES += -i $(ULM_DIR) -DULM_ENABLED
#INCLUDES += -i $(GDB_SERVER_DIR)/include -DGDB_ENABLED

ifeq ($(OMP_ENABLED),1)
INCLUDES += -DOMP_ENABLED
endif

SOURCES = monitor.c util.c dsp_rpc.asm touch.asm builtins.c edma.c \
          edma3_config.c device_am57.c
HEADERS = edma.h monitor.h util.h trace.h
LIBS    = monitor.am57x_rtos.cmd
#LIBS   += $(ULM_DIR)/libtiulm.ae66
#LIBS   += $(GDB_SERVER_DIR)/lib/gdb_server.ae66
OBJS1   = $(patsubst %.c,%.obj,$(SOURCES))
OBJS    = $(patsubst %.asm,%.obj,$(OBJS1))
OCLLIB  = libDSPMonitor.ae66
OCLMAIN = rtos_ocl_main

LINK_CMD0 = $(PROJECT)0/linker.cmd
LINK_CMD1 = $(PROJECT)1/linker.cmd


#----------------------------------------------------------------------------
# XDC stuff
#----------------------------------------------------------------------------
XDCPATH = ./;$(IPC_DIR)/packages;$(BIOS_DIR)/packages;$(OMP_DIR)/packages;$(EDMA3LLD_DIR)/packages;$(FC_DIR)/packages;$(XDAIS_DIR)/packages;$(AM57_PDK_DIR)/packages;../packages
MONITOR_CONFIG = ../packages/ti/opencl/Dsp.cfg

XDCTARGET = ti.targets.elf.C66

COMP_OPTS  = $(PROJECT)/compiler.opt
BUILD_TYPE = release


#----------------------------------------------------------------------------
# LIBM
#----------------------------------------------------------------------------
LIBM_DIR=../libm
LIBM=$(LIBM_DIR)/libm.lib


#----------------------------------------------------------------------------
# BUILTINS
#----------------------------------------------------------------------------
BUILTINS_DIR=../builtins
BUILTINS=$(BUILTINS_DIR)/dsp.lib


#---------------------------------------------------------------------------
# Function to create the dsp symbols database
#----------------------------------------------------------------------------
define create_dsp_syms
	@echo Creating $(2)
	@$(TI_OCL_CGT_INSTALL)/bin/nm6x -l $(1) | grep PROT | awk -F\| '{ print "\t.weak "$$8"\n"$$8"\t.set "$$2 };' >  $(2).asm
	@$(TI_OCL_CGT_INSTALL)/bin/nm6x -l $(1) | grep FUNC | grep -fexport_syms | awk -F\| '{ print "\t.weak "$$8"\n"$$8"\t.set "$$2 };' >> $(2).asm
	@$(CC) $(2).asm
	@cp dsp_link_commands.am57x $(2)
	@rm -f $(1).syms.tmp* $(2).asm
endef

#---------------------------------------------------------------------------
# Function to check if dsp exported syms are laid out exactly the same
# on both dsp cores: the addresses are either equal (in internal memory)
# or differ by the DDR offset of DSP1_PROG memory and DSP2_PROG memory
# $1: dsp0.out, $2: dsp1.out, $3: DDR offset (0x0100_0000 in default memory map)
#----------------------------------------------------------------------------
define check_dsp_syms_layout
	@echo Checking if DSP exported syms are laid out the same: $(1) $(2)
	@$(TI_OCL_CGT_INSTALL)/bin/nm6x -l $(1) | grep PROT | awk -F\| '{ print $$8" "$$2 };' >  $(1).expsyms
	@$(TI_OCL_CGT_INSTALL)/bin/nm6x -l $(1) | grep FUNC | grep -fexport_syms | awk -F\| '{ print $$8" "$$2 };' >> $(1).expsyms
	@$(TI_OCL_CGT_INSTALL)/bin/nm6x -l $(2) | grep PROT | awk -F\| '{ printf "%s 0x%.8x\n", $$8, strtonum($$2) >= strtonum(0x80000000) ? strtonum($$2) - strtonum($(3)) : strtonum($$2) };' >  $(2).expsyms
	@$(TI_OCL_CGT_INSTALL)/bin/nm6x -l $(2) | grep FUNC | grep -fexport_syms | awk -F\| '{ printf "%s 0x%.8x\n", $$8, strtonum($$2) >= strtonum(0x80000000) ? strtonum($$2) - strtonum($(3)) : strtonum($$2) };' >> $(2).expsyms
        diff $(1).expsyms $(2).expsyms; if [ $$? -ne 0 ]; then echo;  echo "   *** Different!!! ***"; echo; exit 1; fi
	@rm -f $(1).expsyms $(2).expsyms
endef


.PHONY: all dsp0 dsp1
all: dsp0 dsp1
#	$(call check_dsp_syms_layout, dsp0.out, dsp1.out, 0x01000000)

dsp0 : $(LINK_CMD0) dsp0.out dsp0.syms
dsp1 : $(LINK_CMD1) dsp1.out dsp1.syms


#---------------------------------------------------------------------------
# Build monitors
#----------------------------------------------------------------------------
dsp0.out: $(OCLMAIN).obj $(LINK_CMD0) $(LIBS)
	@echo Linking $@
	@echo $(LINK_CMD0)
	$(CC) -z --priority -w -x --reread_libs -m$@.map \
	--define=DDR3=DSP1_PROG \
	--define=DDR3_FCSECTION=DSP1_PROG --define=DDR3_NC=OCL_OMP_NOCACHE $^ \
	-I$(TI_OCL_CGT_INSTALL)/lib -llibc.a -o $@

dsp1.out: $(OCLMAIN).obj $(LINK_CMD1) $(LIBS)
	@echo Linking $@
	@echo $(LINK_CMD1)
	$(CC) -z --priority -w -x -m$@.map \
	--define=DDR3=DSP2_PROG \
	--define=DDR3_FCSECTION=DSP2_PROG --define=DDR3_NC=OCL_OMP_NOCACHE  $^ \
	-I$(TI_OCL_CGT_INSTALL)/lib -llibc.a -o $@

%.syms: %.out export_syms
	$(call create_dsp_syms, $<, $@)

$(OCLLIB): $(OBJS) $(BUILTINS) $(LIBM)
	$(AR) r $@ $(OBJS)

$(LIBM):
	$(MAKE) -C $(LIBM_DIR) -j4

$(BUILTINS):
	$(MAKE) -C $(BUILTINS_DIR) -j4

platform_files:
	$(MAKE) -C ../packages/ti/opencl/platforms/am57x_rtos

.PHONY: $(MONITOR_CONFIG)
$(MONITOR_CONFIG):
	$(MAKE) -C ../packages/ti/opencl

$(LINK_CMD0): $(OCLLIB) $(MONITOR_CONFIG) platform_files
	$(XDC_DIR)/xs --xdcpath "$(XDCPATH)" xdc.tools.configuro -c $(TI_OCL_CGT_INSTALL) --cb -t $(XDCTARGET) -p ti.opencl.platforms.$(PLATFORM):DSP1 -r $(BUILD_TYPE) -DDSPCORE=0 -Dxdc.platform.custom.check="false" -o $(PROJECT)0 $(MONITOR_CONFIG)
	@sed '/c6xabi\.exidx/d' $(LINK_CMD0) > lnk_tmp0
	@mv lnk_tmp0 $(LINK_CMD0)

$(LINK_CMD1): $(OCLLIB) $(MONITOR_CONFIG) platform_files
	$(XDC_DIR)/xs --xdcpath "$(XDCPATH)" xdc.tools.configuro -c $(TI_OCL_CGT_INSTALL) --cb -t $(XDCTARGET) -p ti.opencl.platforms.$(PLATFORM):DSP2 -r $(BUILD_TYPE) -DDSPCORE=1 -Dxdc.platform.custom.check="false" -o $(PROJECT)1 $(MONITOR_CONFIG)
	@sed '/c6xabi\.exidx/d' $(LINK_CMD1) > lnk_tmp1
	@mv lnk_tmp1 $(LINK_CMD1)

#---------------------------------------------------------------------------
# Default build rules
#----------------------------------------------------------------------------
%.obj : %.c $(HEADERS)
	@echo Compiling $<
	$(CC) $(INCLUDES) -c $<

%.obj : %.asm
	@echo Compiling $<
	$(CC) $(INCLUDES) -c $<

.PHONY: clean
clean: cleanplatform
	@rm -fr *.out *.map *.syms *.obj *.ae66 libm.cmd libm.fcns builtins.cmd builtins.fcns $(PROJECT)0 $(PROJECT)1

.PHONY: cleanplatform
cleanplatform:
	@$(MAKE) -C ../packages/ti/opencl/platforms/$(PLATFORM) clean

.PHONY: realclean
realclean: clean cleanplatform
	@$(MAKE) -C $(LIBM_DIR) clean
	@$(MAKE) -C $(BUILTINS_DIR) clean

