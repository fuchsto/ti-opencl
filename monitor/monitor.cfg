environment['xdc.cfg.check.fatal'] = 'false';

/*-----------------------------------------------------------------------------
* Packages
*----------------------------------------------------------------------------*/
var Defaults     = xdc.useModule('xdc.runtime.Defaults');
var Diags        = xdc.useModule('xdc.runtime.Diags');
var Error        = xdc.useModule('xdc.runtime.Error');
var Log          = xdc.useModule('xdc.runtime.Log');
var LoggerBuf    = xdc.useModule('xdc.runtime.LoggerBuf');
var Main         = xdc.useModule('xdc.runtime.Main');
var Memory       = xdc.useModule('xdc.runtime.Memory')
var SysMin       = xdc.useModule('xdc.runtime.SysMin');
var System       = xdc.useModule('xdc.runtime.System');
var Text         = xdc.useModule('xdc.runtime.Text');
var BIOS         = xdc.useModule('ti.sysbios.BIOS');
var ECM          = xdc.useModule('ti.sysbios.family.c64p.EventCombiner');
var HeapMem      = xdc.useModule('ti.sysbios.heaps.HeapMem');
var Hwi          = xdc.useModule('ti.sysbios.family.c64p.Hwi');
var Idle         = xdc.useModule('ti.sysbios.knl.Idle');
var Load         = xdc.useModule('ti.sysbios.utils.Load');
var Task         = xdc.useModule('ti.sysbios.knl.Task');
var Sem          = xdc.useModule('ti.sysbios.knl.Semaphore');
var CslSettings  = xdc.useModule('ti.csl.Settings');
var QmssSettings = xdc.useModule('ti.drv.qmss.Settings');
var CppiSettings = xdc.useModule('ti.drv.cppi.Settings');
var Cppi         = xdc.loadPackage('ti.drv.cppi');
var Qmss         = xdc.loadPackage('ti.drv.qmss');

/*-----------------------------------------------------------------------------
*----------------------------------------------------------------------------*/
var instSem0_Params      = new Sem.Params();
instSem0_Params.mode     = Sem.Mode_BINARY;
Program.global.higherSem = Sem.create(0, instSem0_Params);


/*-----------------------------------------------------------------------------
* Settings for K2x only: 'deviceType' property does not exist in 6678 csl
*----------------------------------------------------------------------------*/
if ('deviceType' in CslSettings) 
{
    if (String(Program.cpu.deviceName).search("6638") != -1)
    {
       CslSettings.deviceType  = "k2h";
       QmssSettings.deviceType = "k2h"
       CppiSettings.deviceType = "k2h"
    }
    else if (String(Program.cpu.deviceName).search("K2L") != -1)
    {
       CslSettings.deviceType  = "k2l";
       QmssSettings.deviceType = "k2l"
       CppiSettings.deviceType = "k2l"
    }
    else if (String(Program.cpu.deviceName).search("K2E") != -1)
    {
       CslSettings.deviceType  = "k2e";
       QmssSettings.deviceType = "k2e"
       CppiSettings.deviceType = "k2e"
    }
    else
       Program.$logError("Device:" + Program.cpu.deviceName +
                          " not supported", this);

    var CPINTC       = xdc.useModule('ti.sysbios.family.c66.tci66xx.CpIntc');
    var EdmaMgr      = xdc.useModule('ti.sdo.fc.edmamgr.EdmaMgr');
    /*-------------------------------------------------------------------------
    * To prevent EdmaMgr from use DSKT2
    *------------------------------------------------------------------------*/
    var RMAN                = xdc.useModule('ti.sdo.fc.rman.RMAN');
    RMAN.useDSKT2           = false;
    RMAN.persistentAllocFxn = "EdmaMgr_heap_alloc";
    RMAN.persistentFreeFxn  = "EdmaMgr_heap_free";
    /*-------------------------------------------------------------------------
    * Configure heap for FC use 
    *------------------------------------------------------------------------*/
    Program.sectMap[".INTMEM_HEAP"] = new Program.SectionSpec();
    Program.sectMap[".INTMEM_HEAP"].loadSegment = "L2SRAM";
    var heapMemParams          = new HeapMem.Params();
    heapMemParams.size         = 0x1500;         // Size for internal heap
    heapMemParams.sectionName  = ".INTMEM_HEAP";
    Program.global.INTMEM_HEAP = HeapMem.create(heapMemParams);
}


/*-----------------------------------------------------------------------------
* Settings
*----------------------------------------------------------------------------*/
//BIOS.libType                    = BIOS.LibType_Debug;
SysMin.bufSize                  = 0x1800;
System.SupportProxy             = SysMin;
Task.common$.namedInstance      = true; // Enable instance names
Load.hwiEnabled                 = false;
Load.swiEnabled                 = false;
Load.taskEnabled                = true;
//var heapMemParams1              = new HeapMem.Params;
//heapMemParams1.size             = 0x2000;
//heapMemParams1.sectionName      = "systemHeap";
//Program.global.heap0            = HeapMem.create(heapMemParams1);
Program.argSize                 = 0;
Program.stack                   = 0x2800;
//Memory.defaultHeapInstance      = Program.global.heap0;
//Settings.debugFlag              = Settings.DEBUG;
var memmap                      = Program.cpu.memoryMap;
var profile                     = Program.build.profile;
Hwi.dispatcherAutoNestingSupport= false;


/*
 * Enable Event Groups here and registering of ISR for specific GEM INTC is done
 * using EventCombiner_dispatchPlug() and Hwi_eventMap() APIs
 */
ECM.eventGroupHwiNum[0]         = 8;
ECM.eventGroupHwiNum[1]         = 9;
ECM.eventGroupHwiNum[2]         = 10;
ECM.eventGroupHwiNum[3]         = 11;

/*-----------------------------------------------------------------------------
* Section Mapping
*----------------------------------------------------------------------------*/
/* Exclude sections which will be placed by linker command file */
Program.sectionsExclude = "^\.fardata$|^\.far$";

Program.sectMap["systemHeap"]               = Program.platform.stackMemory;
Program.sectMap[".cinit"]                   = "DDR3";
Program.sectMap[".text"]                    = "DDR3";
Program.sectMap[".ddr"]                     = "DDR3";
Program.sectMap[".const"]                   = "DDR3";
Program.sectMap[".switch"]                  = "DDR3";
Program.sectMap[".tiEmFw"]                  = "DDR3"; // sw router vars. dont know where they go !
Program.sectMap[".plt"]                     = "DDR3";
Program.sectMap[".data"] 		    = "DDR3";
Program.sectMap[".bss"] 		   = "DDR3";
Program.sectMap[".neardata"] 	 	   = "DDR3";
Program.sectMap[".rodata"] 		   = "DDR3";
Program.sectMap[".cio"] 		   = "L2SRAM";


Program.sectMap["platform_lib"]             = "L2SRAM";
Program.sectMap[".private"]                 = new Program.SectionSpec();
Program.sectMap[".private"].loadSegment     = "L2SRAM";
Program.sectMap[".private"].fill            = 0;

Program.sectMap[".tiEmGvDspMcb"]            = Program.sectMap[".private"];
Program.sectMap[".tiEmSvDspFW"]             = Program.sectMap[".private"];
Program.sectMap[".tiEmLocal"]               = Program.sectMap[".private"];

Program.sectMap[".fast_shared_noncached"]              = new Program.SectionSpec();
Program.sectMap[".fast_shared_noncached"].loadSegment  = "MSMC_NC_PHYS";
Program.sectMap[".fast_shared_noncached"].runSegment   = "MSMC_NC_VIRT";
Program.sectMap[".fast_shared_noncached"].fill         = 0;

Program.sectMap[".tiEmGlobalFast"]          = Program.sectMap[".fast_shared_noncached"];
Program.sectMap[".tiEmGlobalSlow"]          = Program.sectMap[".fast_shared_noncached"]; // can be ddr
Program.sectMap[".cppi"]                    = Program.sectMap[".fast_shared_noncached"];
Program.sectMap[".qmss"]                    = Program.sectMap[".fast_shared_noncached"];
Program.sectMap[".tiEmSvDspMcb"]            = Program.sectMap[".fast_shared_noncached"];
Program.sectMap[".tiEmSvEoMdb"]             = Program.sectMap[".fast_shared_noncached"];
Program.sectMap[".tiEmSvEventGroupMdb"]     = Program.sectMap[".fast_shared_noncached"];
Program.sectMap[".tiEmSvQueueMdb"]          = Program.sectMap[".fast_shared_noncached"];
Program.sectMap[".tiEmSvQueueGroupMdb"]     = Program.sectMap[".fast_shared_noncached"];
Program.sectMap[".tomp_svNcMem"]            = Program.sectMap[".fast_shared_noncached"];

var loggerBufParams        = new LoggerBuf.Params();
loggerBufParams.numEntries = 32;
var logger0                = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger    = logger0;
Main.common$.diags_INFO    = Diags.ALWAYS_ON;

//var Agent                       = xdc.useModule('ti.sysbios.rta.Agent');
//Agent.transport                 = Agent.Transport_STOP_MODE_ONLY;
//Agent.sysbiosSwiLogging         = true;
//Agent.sysbiosLoggerSize         = 40960;

/*-----------------------------------------------------------------------------
* OpenMP Configuration
*----------------------------------------------------------------------------*/
/* Include OMP runtime in the build */
var omp = xdc.useModule("ti.runtime.openmp.Settings");
omp.usingRtsc   = true;
omp.usingOpenCL = true;

/* Size of the heap shared by all the cores */
/** var sharedHeapSize = 0x8000;  **/
//var sharedHeapSize = 0x14000;
var sharedHeapSize = 0x814000;  // make 8M avail for c code from kernels

var OpenMP = xdc.useModule('ti.runtime.ompbios.OpenMP');
/* Configure the index of the master core and the number of cores */
OpenMP.masterCoreIdx = 0;

if(Program.cpu.deviceName == "TMS320TCI6638")
    OpenMP.numCores      = 8;
else if(Program.cpu.deviceName == "TMS320TCI6630K2L")
    OpenMP.numCores      = 4;
else if(Program.cpu.deviceName == "TMS320C66AK2E05")
    OpenMP.numCores      = 1;
else if(Program.cpu.deviceName == "TMS320C6678")
    OpenMP.numCores      = 8;
else
    OpenMP.numCores      = -1;

/* Configure memory allocation using HeapOMP
 * HeapOMP handles 
 * - Memory allocation requests from BIOS components (core local memory)
 * - Shared memory allocation by utilizing the IPC module to enable 
 *   multiple cores to allocate memory out of the same heap.
 */
var HeapOMP = xdc.useModule('ti.runtime.ompbios.HeapOMP');

/* Shared Region 0 must be initialized for IPC */
var sharedRegionId = 0;

/* Size of the core local heap (a HeapMem on each core) */
var localHeapSize  = 0x2000;

/* DDR3 is a memory region described in Platform.xdc */
var ddr3mem = Program.cpu.memoryMap["DDR3"];

/* Initialize Shared Region & create a heap in the MSMCSRAM memory region */
var SharedRegion   = xdc.useModule('ti.sdo.ipc.SharedRegion');
SharedRegion.setEntryMeta( sharedRegionId,
                           {   base: ddr3mem.base,
                               len:  sharedHeapSize,
                               ownerProcId: 0,
                               cacheEnable: true,
                               createHeap: true,
                               isValid: true,
                               name: "DDR3_SR0",
                           });



/* Configure and setup HeapOMP */
HeapOMP.configure(sharedRegionId, localHeapSize);


/*-----------------------------------------------------------------------------
* The following is for enabling FC trace using stdio
*----------------------------------------------------------------------------*/
//var System = xdc.useModule('xdc.runtime.System');
//System.SupportProxy = xdc.useModule('xdc.runtime.SysStd');
 
//var LoggerSys = xdc.useModule('xdc.runtime.LoggerSys');
//var LoggerSysParams = new LoggerSys.Params();
 
//var Defaults = xdc.useModule('xdc.runtime.Defaults');
//Defaults.common$.logger = LoggerSys.create(LoggerSysParams);

/*-----------------------------------------------------------------------------
* Enable logging for metaonly modules
*----------------------------------------------------------------------------*/
//var Main  = xdc.useModule('xdc.runtime.Main');
//var Diags = xdc.useModule('xdc.runtime.Diags');
//Diags.setMaskMeta('xdc.runtime.Main', Diags.ALL, Diags.RUNTIME_ON);
 
//var Registry = xdc.useModule('xdc.runtime.Registry');
//Diags.setMaskMeta("xdc.runtime.Registry", Diags.ALL, Diags.RUNTIME_OFF);
