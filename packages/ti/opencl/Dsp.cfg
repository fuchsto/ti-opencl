/*
 * Copyright (c) 2012-2014 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== Dsp.cfg ========
 *  Platform: DRA7XX_bios_elf
 *  Target: ti.targets.elf.C66
 */

/* root of the configuration object model */
var Program = xdc.useModule('xdc.cfg.Program');
var cfgArgs = Program.build.cfgArgs;

/* application uses the following modules and packages */
xdc.useModule('xdc.runtime.Assert');
xdc.useModule('xdc.runtime.Diags');
xdc.useModule('xdc.runtime.Error');
xdc.useModule('xdc.runtime.Log');
xdc.useModule('xdc.runtime.Registry');

xdc.useModule('ti.sysbios.knl.Semaphore');
var Task = xdc.useModule('ti.sysbios.knl.Task');
Task.common$.namedInstance = true;


var GateProcess = xdc.useModule('xdc.runtime.knl.GateProcess');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
if (Program.build.profile == "debug") {
    BIOS.libType = BIOS.LibType_Debug;
    BIOS.assertsEnabled = false;
} else {
    BIOS.libType = BIOS.LibType_Custom;
    BIOS.assertsEnabled = false;
}

// Program.sectMap[".ddr"] = new Program.SectionSpec();
// Program.sectMap[".ddr"].loadSegment = "DDR3";
// Program.sectMap[".private"] = new Program.SectionSpec();
// Program.sectMap[".private"].loadSegment = "DDR3";
// Program.sectMap[".cio"] = new Program.SectionSpec();
// Program.sectMap[".cio"].loadSegment = "DDR3";
// Program.sectMap[".workgroup_config"] = new Program.SectionSpec();
// Program.sectMap[".workgroup_config"].loadSegment = "DDR3";

/*-----------------------------------------------------------------------------
 * OpenMP Configuration
 * NOTE: This must occur before DSPMonitor is included to get the correct
 * Notify SetupProxy
 *----------------------------------------------------------------------------*/
var enable_openmp =  java.lang.System.getenv("OMP_ENABLED");
if (enable_openmp && (parseInt(enable_openmp) == 1))
{
   var omp = xdc.useModule("ti.runtime.openmp.Settings");
   omp.usingRtsc   = true;
   omp.usingOpenCL = true;

   var OpenMP = xdc.useModule('ti.runtime.ompbios.OpenMP');

   /* Do not use an IPC heap */
   OpenMP.useIpcSharedHeap = false;

   /* Size heap internal to bios */
   OpenMP.allocateLocalHeap = true;
   OpenMP.allocateLocalHeapSize = 0x40000;

   /* Size DSP shared heap for malloc in DDR3 */
   OpenMP.allocateSharedHeap = true;
   OpenMP.allocateSharedHeapSize = 0x00800000;

   var Sem = xdc.useModule('ti.sysbios.knl.Semaphore');
   var instSem0_Params = new Sem.Params();
   instSem0_Params.mode = Sem.Mode_BINARY;
   Program.global.runOmpSem          = Sem.create(0, instSem0_Params);
   Program.global.runOmpSem_complete = Sem.create(0, instSem0_Params);

   Program.sectMap[".sysmem"]                  = new Program.SectionSpec();
   Program.sectMap[".sysmem"].type             = "NOLOAD"
   Program.sectMap[".sysmem"].loadSegment      = "OCL_OMP_HEAP";
}


/*
 *  ======== IPC Configuration ========
 */
xdc.global.SR0_cacheEnable = false;
if (environment["DSPCORE"] == "0")
{
    xdc.global.oclProcName = "DSP1";
} else {
    xdc.global.oclProcName = "DSP2";
}

var DSPMonitor = xdc.useModule('ti.opencl.DSPMonitor');

/* make SR_0 non-cacheable, done in initialize_memory() in device_am57.c */
// var Cache = xdc.useModule('ti.sysbios.family.c66.Cache');
// Cache.setMarMeta(ipc_cfg.SR0Mem.base, ipc_cfg.SR0Mem.len, Cache.Mar_DISABLE);

/* select ipc libraries */
var Build = xdc.useModule('ti.sdo.ipc.Build');
if (Program.build.profile == "debug") {
   Build.libType = Build.LibType_Debug;
   Build.assertsEnabled = false;
   Build.logsEnabled = true;
} else {
   Build.libType = Build.LibType_Custom;
   Build.assertsEnabled = false;
   Build.logsEnabled = false;
}


/*
 *  ======== Framework Components (including EdmaMgr) ========
 */
var EdmaMgr      = xdc.useModule('ti.sdo.fc.edmamgr.EdmaMgr');
/*-------------------------------------------------------------------------
* To prevent EdmaMgr from use DSKT2
*------------------------------------------------------------------------*/
var RMAN                = xdc.useModule('ti.sdo.fc.rman.RMAN');
RMAN.useDSKT2           = false;
RMAN.persistentAllocFxn = "EdmaMgr_heap_alloc";
RMAN.persistentFreeFxn  = "EdmaMgr_heap_free";
/*-------------------------------------------------------------------------
* Configure heap for FC use
*------------------------------------------------------------------------*/
Program.sectMap[".INTMEM_HEAP"] = new Program.SectionSpec();
Program.sectMap[".INTMEM_HEAP"].loadSegment = "DDR3";
var HeapMem                = xdc.useModule('ti.sysbios.heaps.HeapMem');
var heapMemParams          = new HeapMem.Params();
heapMemParams.size         = 0x1500;         // Size for internal heap
heapMemParams.align        = 0x80;
heapMemParams.sectionName  = ".INTMEM_HEAP";
Program.global.INTMEM_HEAP = HeapMem.create(heapMemParams);

/*
 *  ======== MMU Setup for kernels on DSP 2: 0x8C => 0x8D ========
 */
var Mmu = xdc.useModule('ti.sysbios.family.shared.vayu.Mmu');
Mmu.enableMMU = true;
var attrs = Mmu.defaultAttrs;    // 1MB section page

// MMU settings taken from linux custom_rsc_table_vayu_dsp.h
for (var i = 0x48000000; i < 0x48200000; i = i + 0x00100000)
   Mmu.setFirstLevelDescMeta(i, i, attrs);
for (var i = 0x48400000; i < 0x48800000; i = i + 0x00100000)
   Mmu.setFirstLevelDescMeta(i, i, attrs);
for (var i = 0x48800000; i < 0x49000000; i = i + 0x00100000)
   Mmu.setFirstLevelDescMeta(i, i, attrs);
for (var i = 0x4A000000; i < 0x4B000000; i = i + 0x00100000)
   Mmu.setFirstLevelDescMeta(i, i, attrs);
for (var i = 0x4E000000; i < 0x4E100000; i = i + 0x00100000)
   Mmu.setFirstLevelDescMeta(i, i, attrs);
for (var i = 0x52000000; i < 0x52100000; i = i + 0x00100000)
   Mmu.setFirstLevelDescMeta(i, i, attrs);
for (var i = 0x54000000; i < 0x55000000; i = i + 0x00100000)
   Mmu.setFirstLevelDescMeta(i, i, attrs);
for (var i = 0x60000000; i < 0x70000000; i = i + 0x00100000)
   Mmu.setFirstLevelDescMeta(i, i, attrs);
for (var i = 0x70000000; i < 0x78000000; i = i + 0x00100000)
   Mmu.setFirstLevelDescMeta(i, i, attrs);
for (var i = 0x78000000; i < 0x80000000; i = i + 0x00100000)
   Mmu.setFirstLevelDescMeta(i, i, attrs);

// DDR memory
// Due to slight difference, make sure dsp_syms are laid out exactly the
// same in both DSPs, more specifically, check Mmu_initTableBuf() .text length
// in both debug and release build profile
for (var i = 0x80000000; i < 0x8C000000; i = i + 0x00100000)
   Mmu.setFirstLevelDescMeta(i, i, attrs);
if (xdc.global.oclProcName == "DSP1")
{
  for (var i = 0x8C000000; i < 0x8D000000; i = i + 0x00100000)
    Mmu.setFirstLevelDescMeta(i, i, attrs);
}
else
{
  for (var i = 0x8C000000; i < 0x8D000000; i = i + 0x00100000)
    Mmu.setFirstLevelDescMeta(i, (i + 0x01000000), attrs);
}
for (var i = 0x8D000000; i < 0xFFFF0000; i = i + 0x00100000)
   Mmu.setFirstLevelDescMeta(i, i, attrs);

var sectionName = "ti.sysbios.family.shared.vayu.mmuTableSection";
Program.sectMap[sectionName] = new Program.SectionSpec();
Program.sectMap[sectionName].type = "NOINIT"; // NOLOAD for GNU Tools
Program.sectMap[sectionName].loadSegment = "DDR3";


/*
 *  ======== Operating System Configuration ========
 */
/* BIOS semaphore */
var Sem = xdc.useModule('ti.sysbios.knl.Semaphore');
var instSem0_Params = new Sem.Params();
instSem0_Params.mode = Sem.Mode_BINARY;
Program.global.higherSem = Sem.create(0, instSem0_Params);

/* no rts heap */
Program.heap = 0;
Program.argSize = 100;  /* minimum size */
Program.stack = 0x2000;

/* create a default heap */
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var heapMemParams = new HeapMem.Params();
heapMemParams.size = 0x800000;
var Memory = xdc.useModule('xdc.runtime.Memory');
Memory.defaultHeapInstance = HeapMem.create(heapMemParams);

/* configure System module */
var SysMin = xdc.useModule('xdc.runtime.SysMin');
SysMin.bufSize = 0x1000;
SysMin.flushAtExit = false;

var System = xdc.useModule('xdc.runtime.System');
System.SupportProxy = SysMin;

BIOS.cpuFreq.hi = 0;
BIOS.cpuFreq.lo = 600000000; /* 600 MHz */
/* Turn off the timer frequency check. The DSP timer does not run when
 * the host is halted because of the emulation suspend signal.
 */
    /***********************************************
     *          CLOCK Module Configuraion          *
     ***********************************************/
    var Clock = xdc.useModule("ti.sysbios.knl.Clock");
    Clock.tickMode = Clock.TickMode_PERIODIC;
    Clock.tickSource = Clock.TickSource_USER;
    Clock.tickPeriod    = 1000;

    /* allocate timer 5 to DSP1 */
    var TimerSupport = xdc.useModule('ti.sysbios.family.shared.vayu.TimerSupport');
    TimerSupport.availMask = 0x0020;

    /***********************************************
    *           Timer Module Configuraion         *
    ***********************************************/
    var Timer = xdc.useModule('ti.sysbios.timers.dmtimer.Timer');

    Timer.intFreq.hi = 0;
    /* system clock runs at 16.8 MHz */
    Timer.intFreq.lo = 16800000;

    var timerParams = new Timer.Params();
    timerParams.period = 1000;
    timerParams.twer.ovf_wup_ena = 1;
    timerParams.tiocpCfg.emufree = 1;
    Timer.create(5, '&mainDsp1TimerTick', timerParams);


var Idle = xdc.useModule('ti.sysbios.knl.Idle');


/*
 *  ======== Miscellaneous Configuration ========
 */

/* set default diags mask */
var Diags = xdc.useModule('xdc.runtime.Diags');
var Defaults = xdc.useModule('xdc.runtime.Defaults');

Defaults.common$.diags_ENTRY     = Diags.ALWAYS_OFF;
Defaults.common$.diags_EXIT      = Diags.ALWAYS_OFF;
Defaults.common$.diags_LIFECYCLE = Diags.ALWAYS_OFF;
if (Program.build.profile == "debug") {
    Defaults.common$.diags_INTERNAL  = Diags.ALWAYS_ON;
    Defaults.common$.diags_ASSERT    = Diags.ALWAYS_ON;
} else {
    Defaults.common$.diags_INTERNAL  = Diags.ALWAYS_OFF;
    Defaults.common$.diags_ASSERT    = Diags.ALWAYS_OFF;
}
Defaults.common$.diags_STATUS    = Diags.RUNTIME_ON;
Defaults.common$.diags_USER1     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER2     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER3     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER4     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER5     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER6     = Diags.ALWAYS_OFF;
Defaults.common$.diags_INFO      = Diags.ALWAYS_OFF;
Defaults.common$.diags_ANALYSIS  = Diags.ALWAYS_OFF;

/* override diags mask for selected modules */
xdc.useModule('xdc.runtime.Main');
Diags.setMaskMeta(
    "xdc.runtime.Main",
    Diags.ENTRY | Diags.EXIT | Diags.INFO,
    Diags.RUNTIME_ON
);

var Registry = xdc.useModule('xdc.runtime.Registry');
Registry.common$.diags_ENTRY    = Diags.ALWAYS_OFF;
Registry.common$.diags_EXIT     = Diags.ALWAYS_OFF;
Registry.common$.diags_INFO     = Diags.ALWAYS_OFF;
Registry.common$.diags_ANALYSIS = Diags.ALWAYS_OFF;
Registry.common$.diags_USER1    = Diags.ALWAYS_OFF;

/* create a logger instance */
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var loggerBufP = new LoggerBuf.Params();
loggerBufP.numEntries = 256;  /* 256 entries = 8 KB of memory */
loggerBufP.bufType = LoggerBuf.BufType_FIXED;

var appLogger = LoggerBuf.create(loggerBufP);
appLogger.instance.name = "AppLog_Core1";
Defaults.common$.logger = appLogger;


